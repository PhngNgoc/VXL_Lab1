
lab1_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001e24  08001e24  00011e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e44  08001e44  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e44  08001e44  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e44  08001e44  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e44  08001e44  00011e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e48  08001e48  00011e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08001e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  2000004c  08001e98  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08001e98  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000032e9  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000eb3  00000000  00000000  0002335e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000400  00000000  00000000  00024218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000378  00000000  00000000  00024618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015696  00000000  00000000  00024990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004be6  00000000  00000000  0003a026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079d0c  00000000  00000000  0003ec0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b8918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000df0  00000000  00000000  000b896c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e0c 	.word	0x08001e0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	08001e0c 	.word	0x08001e0c

0800014c <display7SEG1>:
#define SRC_EX3_H_



#endif /* SRC_EX3_H_ */
void display7SEG1(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG1+0x310>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG1+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48b4      	ldr	r0, [pc, #720]	; (8000464 <display7SEG1+0x318>)
 8000192:	f001 fa0f 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48b2      	ldr	r0, [pc, #712]	; (8000464 <display7SEG1+0x318>)
 800019c:	f001 fa0a 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48af      	ldr	r0, [pc, #700]	; (8000464 <display7SEG1+0x318>)
 80001a6:	f001 fa05 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48ad      	ldr	r0, [pc, #692]	; (8000464 <display7SEG1+0x318>)
 80001b0:	f001 fa00 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48aa      	ldr	r0, [pc, #680]	; (8000464 <display7SEG1+0x318>)
 80001ba:	f001 f9fb 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48a8      	ldr	r0, [pc, #672]	; (8000464 <display7SEG1+0x318>)
 80001c4:	f001 f9f6 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	; 0x40
 80001cc:	48a5      	ldr	r0, [pc, #660]	; (8000464 <display7SEG1+0x318>)
 80001ce:	f001 f9f1 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 80001d2:	e143      	b.n	800045c <display7SEG1+0x310>
		case 1:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48a2      	ldr	r0, [pc, #648]	; (8000464 <display7SEG1+0x318>)
 80001da:	f001 f9eb 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48a0      	ldr	r0, [pc, #640]	; (8000464 <display7SEG1+0x318>)
 80001e4:	f001 f9e6 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	489d      	ldr	r0, [pc, #628]	; (8000464 <display7SEG1+0x318>)
 80001ee:	f001 f9e1 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	489b      	ldr	r0, [pc, #620]	; (8000464 <display7SEG1+0x318>)
 80001f8:	f001 f9dc 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4898      	ldr	r0, [pc, #608]	; (8000464 <display7SEG1+0x318>)
 8000202:	f001 f9d7 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	4896      	ldr	r0, [pc, #600]	; (8000464 <display7SEG1+0x318>)
 800020c:	f001 f9d2 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	4893      	ldr	r0, [pc, #588]	; (8000464 <display7SEG1+0x318>)
 8000216:	f001 f9cd 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 800021a:	e11f      	b.n	800045c <display7SEG1+0x310>
		case 2:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4890      	ldr	r0, [pc, #576]	; (8000464 <display7SEG1+0x318>)
 8000222:	f001 f9c7 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	488e      	ldr	r0, [pc, #568]	; (8000464 <display7SEG1+0x318>)
 800022c:	f001 f9c2 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	488b      	ldr	r0, [pc, #556]	; (8000464 <display7SEG1+0x318>)
 8000236:	f001 f9bd 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	4889      	ldr	r0, [pc, #548]	; (8000464 <display7SEG1+0x318>)
 8000240:	f001 f9b8 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4886      	ldr	r0, [pc, #536]	; (8000464 <display7SEG1+0x318>)
 800024a:	f001 f9b3 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4884      	ldr	r0, [pc, #528]	; (8000464 <display7SEG1+0x318>)
 8000254:	f001 f9ae 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4881      	ldr	r0, [pc, #516]	; (8000464 <display7SEG1+0x318>)
 800025e:	f001 f9a9 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 8000262:	e0fb      	b.n	800045c <display7SEG1+0x310>
		case 3:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	487e      	ldr	r0, [pc, #504]	; (8000464 <display7SEG1+0x318>)
 800026a:	f001 f9a3 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	487c      	ldr	r0, [pc, #496]	; (8000464 <display7SEG1+0x318>)
 8000274:	f001 f99e 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	4879      	ldr	r0, [pc, #484]	; (8000464 <display7SEG1+0x318>)
 800027e:	f001 f999 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4877      	ldr	r0, [pc, #476]	; (8000464 <display7SEG1+0x318>)
 8000288:	f001 f994 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4874      	ldr	r0, [pc, #464]	; (8000464 <display7SEG1+0x318>)
 8000292:	f001 f98f 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4872      	ldr	r0, [pc, #456]	; (8000464 <display7SEG1+0x318>)
 800029c:	f001 f98a 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	486f      	ldr	r0, [pc, #444]	; (8000464 <display7SEG1+0x318>)
 80002a6:	f001 f985 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 80002aa:	e0d7      	b.n	800045c <display7SEG1+0x310>
		case 4:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	486c      	ldr	r0, [pc, #432]	; (8000464 <display7SEG1+0x318>)
 80002b2:	f001 f97f 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	486a      	ldr	r0, [pc, #424]	; (8000464 <display7SEG1+0x318>)
 80002bc:	f001 f97a 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4867      	ldr	r0, [pc, #412]	; (8000464 <display7SEG1+0x318>)
 80002c6:	f001 f975 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4865      	ldr	r0, [pc, #404]	; (8000464 <display7SEG1+0x318>)
 80002d0:	f001 f970 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4862      	ldr	r0, [pc, #392]	; (8000464 <display7SEG1+0x318>)
 80002da:	f001 f96b 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4860      	ldr	r0, [pc, #384]	; (8000464 <display7SEG1+0x318>)
 80002e4:	f001 f966 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	485d      	ldr	r0, [pc, #372]	; (8000464 <display7SEG1+0x318>)
 80002ee:	f001 f961 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 80002f2:	e0b3      	b.n	800045c <display7SEG1+0x310>
		case 5:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	485a      	ldr	r0, [pc, #360]	; (8000464 <display7SEG1+0x318>)
 80002fa:	f001 f95b 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4858      	ldr	r0, [pc, #352]	; (8000464 <display7SEG1+0x318>)
 8000304:	f001 f956 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4855      	ldr	r0, [pc, #340]	; (8000464 <display7SEG1+0x318>)
 800030e:	f001 f951 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4853      	ldr	r0, [pc, #332]	; (8000464 <display7SEG1+0x318>)
 8000318:	f001 f94c 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4850      	ldr	r0, [pc, #320]	; (8000464 <display7SEG1+0x318>)
 8000322:	f001 f947 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	484e      	ldr	r0, [pc, #312]	; (8000464 <display7SEG1+0x318>)
 800032c:	f001 f942 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	484b      	ldr	r0, [pc, #300]	; (8000464 <display7SEG1+0x318>)
 8000336:	f001 f93d 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 800033a:	e08f      	b.n	800045c <display7SEG1+0x310>
		case 6:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4848      	ldr	r0, [pc, #288]	; (8000464 <display7SEG1+0x318>)
 8000342:	f001 f937 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4846      	ldr	r0, [pc, #280]	; (8000464 <display7SEG1+0x318>)
 800034c:	f001 f932 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4843      	ldr	r0, [pc, #268]	; (8000464 <display7SEG1+0x318>)
 8000356:	f001 f92d 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4841      	ldr	r0, [pc, #260]	; (8000464 <display7SEG1+0x318>)
 8000360:	f001 f928 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	483e      	ldr	r0, [pc, #248]	; (8000464 <display7SEG1+0x318>)
 800036a:	f001 f923 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	483c      	ldr	r0, [pc, #240]	; (8000464 <display7SEG1+0x318>)
 8000374:	f001 f91e 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	4839      	ldr	r0, [pc, #228]	; (8000464 <display7SEG1+0x318>)
 800037e:	f001 f919 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 8000382:	e06b      	b.n	800045c <display7SEG1+0x310>
		case 7:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4836      	ldr	r0, [pc, #216]	; (8000464 <display7SEG1+0x318>)
 800038a:	f001 f913 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4834      	ldr	r0, [pc, #208]	; (8000464 <display7SEG1+0x318>)
 8000394:	f001 f90e 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4831      	ldr	r0, [pc, #196]	; (8000464 <display7SEG1+0x318>)
 800039e:	f001 f909 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	482f      	ldr	r0, [pc, #188]	; (8000464 <display7SEG1+0x318>)
 80003a8:	f001 f904 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	482c      	ldr	r0, [pc, #176]	; (8000464 <display7SEG1+0x318>)
 80003b2:	f001 f8ff 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	482a      	ldr	r0, [pc, #168]	; (8000464 <display7SEG1+0x318>)
 80003bc:	f001 f8fa 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4827      	ldr	r0, [pc, #156]	; (8000464 <display7SEG1+0x318>)
 80003c6:	f001 f8f5 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 80003ca:	e047      	b.n	800045c <display7SEG1+0x310>
		case 8:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4824      	ldr	r0, [pc, #144]	; (8000464 <display7SEG1+0x318>)
 80003d2:	f001 f8ef 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4822      	ldr	r0, [pc, #136]	; (8000464 <display7SEG1+0x318>)
 80003dc:	f001 f8ea 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	481f      	ldr	r0, [pc, #124]	; (8000464 <display7SEG1+0x318>)
 80003e6:	f001 f8e5 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	481d      	ldr	r0, [pc, #116]	; (8000464 <display7SEG1+0x318>)
 80003f0:	f001 f8e0 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	481a      	ldr	r0, [pc, #104]	; (8000464 <display7SEG1+0x318>)
 80003fa:	f001 f8db 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4818      	ldr	r0, [pc, #96]	; (8000464 <display7SEG1+0x318>)
 8000404:	f001 f8d6 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4815      	ldr	r0, [pc, #84]	; (8000464 <display7SEG1+0x318>)
 800040e:	f001 f8d1 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 8000412:	e023      	b.n	800045c <display7SEG1+0x310>
		case 9:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4812      	ldr	r0, [pc, #72]	; (8000464 <display7SEG1+0x318>)
 800041a:	f001 f8cb 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4810      	ldr	r0, [pc, #64]	; (8000464 <display7SEG1+0x318>)
 8000424:	f001 f8c6 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <display7SEG1+0x318>)
 800042e:	f001 f8c1 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	480b      	ldr	r0, [pc, #44]	; (8000464 <display7SEG1+0x318>)
 8000438:	f001 f8bc 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	4808      	ldr	r0, [pc, #32]	; (8000464 <display7SEG1+0x318>)
 8000442:	f001 f8b7 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4806      	ldr	r0, [pc, #24]	; (8000464 <display7SEG1+0x318>)
 800044c:	f001 f8b2 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4803      	ldr	r0, [pc, #12]	; (8000464 <display7SEG1+0x318>)
 8000456:	f001 f8ad 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 800045a:	bf00      	nop

	}
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40010c00 	.word	0x40010c00

08000468 <display7SEG2>:
void display7SEG2(int num){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2b09      	cmp	r3, #9
 8000474:	f200 81bc 	bhi.w	80007f0 <display7SEG2+0x388>
 8000478:	a201      	add	r2, pc, #4	; (adr r2, 8000480 <display7SEG2+0x18>)
 800047a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047e:	bf00      	nop
 8000480:	080004a9 	.word	0x080004a9
 8000484:	080004fd 	.word	0x080004fd
 8000488:	08000551 	.word	0x08000551
 800048c:	080005a5 	.word	0x080005a5
 8000490:	080005f9 	.word	0x080005f9
 8000494:	0800064d 	.word	0x0800064d
 8000498:	080006a1 	.word	0x080006a1
 800049c:	080006f5 	.word	0x080006f5
 80004a0:	08000749 	.word	0x08000749
 80004a4:	0800079d 	.word	0x0800079d
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	48d2      	ldr	r0, [pc, #840]	; (80007f8 <display7SEG2+0x390>)
 80004ae:	f001 f881 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b8:	48cf      	ldr	r0, [pc, #828]	; (80007f8 <display7SEG2+0x390>)
 80004ba:	f001 f87b 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c4:	48cc      	ldr	r0, [pc, #816]	; (80007f8 <display7SEG2+0x390>)
 80004c6:	f001 f875 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d0:	48c9      	ldr	r0, [pc, #804]	; (80007f8 <display7SEG2+0x390>)
 80004d2:	f001 f86f 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004dc:	48c6      	ldr	r0, [pc, #792]	; (80007f8 <display7SEG2+0x390>)
 80004de:	f001 f869 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e8:	48c3      	ldr	r0, [pc, #780]	; (80007f8 <display7SEG2+0x390>)
 80004ea:	f001 f863 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	48c0      	ldr	r0, [pc, #768]	; (80007f8 <display7SEG2+0x390>)
 80004f6:	f001 f85d 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 80004fa:	e179      	b.n	80007f0 <display7SEG2+0x388>
		case 1:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2180      	movs	r1, #128	; 0x80
 8000500:	48bd      	ldr	r0, [pc, #756]	; (80007f8 <display7SEG2+0x390>)
 8000502:	f001 f857 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 7180 	mov.w	r1, #256	; 0x100
 800050c:	48ba      	ldr	r0, [pc, #744]	; (80007f8 <display7SEG2+0x390>)
 800050e:	f001 f851 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000518:	48b7      	ldr	r0, [pc, #732]	; (80007f8 <display7SEG2+0x390>)
 800051a:	f001 f84b 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000524:	48b4      	ldr	r0, [pc, #720]	; (80007f8 <display7SEG2+0x390>)
 8000526:	f001 f845 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000530:	48b1      	ldr	r0, [pc, #708]	; (80007f8 <display7SEG2+0x390>)
 8000532:	f001 f83f 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053c:	48ae      	ldr	r0, [pc, #696]	; (80007f8 <display7SEG2+0x390>)
 800053e:	f001 f839 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000548:	48ab      	ldr	r0, [pc, #684]	; (80007f8 <display7SEG2+0x390>)
 800054a:	f001 f833 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 800054e:	e14f      	b.n	80007f0 <display7SEG2+0x388>
		case 2:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	48a8      	ldr	r0, [pc, #672]	; (80007f8 <display7SEG2+0x390>)
 8000556:	f001 f82d 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000560:	48a5      	ldr	r0, [pc, #660]	; (80007f8 <display7SEG2+0x390>)
 8000562:	f001 f827 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056c:	48a2      	ldr	r0, [pc, #648]	; (80007f8 <display7SEG2+0x390>)
 800056e:	f001 f821 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000578:	489f      	ldr	r0, [pc, #636]	; (80007f8 <display7SEG2+0x390>)
 800057a:	f001 f81b 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000584:	489c      	ldr	r0, [pc, #624]	; (80007f8 <display7SEG2+0x390>)
 8000586:	f001 f815 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	4899      	ldr	r0, [pc, #612]	; (80007f8 <display7SEG2+0x390>)
 8000592:	f001 f80f 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059c:	4896      	ldr	r0, [pc, #600]	; (80007f8 <display7SEG2+0x390>)
 800059e:	f001 f809 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 80005a2:	e125      	b.n	80007f0 <display7SEG2+0x388>
		case 3:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2180      	movs	r1, #128	; 0x80
 80005a8:	4893      	ldr	r0, [pc, #588]	; (80007f8 <display7SEG2+0x390>)
 80005aa:	f001 f803 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b4:	4890      	ldr	r0, [pc, #576]	; (80007f8 <display7SEG2+0x390>)
 80005b6:	f000 fffd 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c0:	488d      	ldr	r0, [pc, #564]	; (80007f8 <display7SEG2+0x390>)
 80005c2:	f000 fff7 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005cc:	488a      	ldr	r0, [pc, #552]	; (80007f8 <display7SEG2+0x390>)
 80005ce:	f000 fff1 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d8:	4887      	ldr	r0, [pc, #540]	; (80007f8 <display7SEG2+0x390>)
 80005da:	f000 ffeb 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e4:	4884      	ldr	r0, [pc, #528]	; (80007f8 <display7SEG2+0x390>)
 80005e6:	f000 ffe5 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f0:	4881      	ldr	r0, [pc, #516]	; (80007f8 <display7SEG2+0x390>)
 80005f2:	f000 ffdf 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 80005f6:	e0fb      	b.n	80007f0 <display7SEG2+0x388>
		case 4:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	487e      	ldr	r0, [pc, #504]	; (80007f8 <display7SEG2+0x390>)
 80005fe:	f000 ffd9 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000608:	487b      	ldr	r0, [pc, #492]	; (80007f8 <display7SEG2+0x390>)
 800060a:	f000 ffd3 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000614:	4878      	ldr	r0, [pc, #480]	; (80007f8 <display7SEG2+0x390>)
 8000616:	f000 ffcd 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000620:	4875      	ldr	r0, [pc, #468]	; (80007f8 <display7SEG2+0x390>)
 8000622:	f000 ffc7 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062c:	4872      	ldr	r0, [pc, #456]	; (80007f8 <display7SEG2+0x390>)
 800062e:	f000 ffc1 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000638:	486f      	ldr	r0, [pc, #444]	; (80007f8 <display7SEG2+0x390>)
 800063a:	f000 ffbb 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000644:	486c      	ldr	r0, [pc, #432]	; (80007f8 <display7SEG2+0x390>)
 8000646:	f000 ffb5 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 800064a:	e0d1      	b.n	80007f0 <display7SEG2+0x388>
		case 5:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2180      	movs	r1, #128	; 0x80
 8000650:	4869      	ldr	r0, [pc, #420]	; (80007f8 <display7SEG2+0x390>)
 8000652:	f000 ffaf 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065c:	4866      	ldr	r0, [pc, #408]	; (80007f8 <display7SEG2+0x390>)
 800065e:	f000 ffa9 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000668:	4863      	ldr	r0, [pc, #396]	; (80007f8 <display7SEG2+0x390>)
 800066a:	f000 ffa3 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000674:	4860      	ldr	r0, [pc, #384]	; (80007f8 <display7SEG2+0x390>)
 8000676:	f000 ff9d 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000680:	485d      	ldr	r0, [pc, #372]	; (80007f8 <display7SEG2+0x390>)
 8000682:	f000 ff97 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068c:	485a      	ldr	r0, [pc, #360]	; (80007f8 <display7SEG2+0x390>)
 800068e:	f000 ff91 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000698:	4857      	ldr	r0, [pc, #348]	; (80007f8 <display7SEG2+0x390>)
 800069a:	f000 ff8b 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 800069e:	e0a7      	b.n	80007f0 <display7SEG2+0x388>
		case 6:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	4854      	ldr	r0, [pc, #336]	; (80007f8 <display7SEG2+0x390>)
 80006a6:	f000 ff85 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b0:	4851      	ldr	r0, [pc, #324]	; (80007f8 <display7SEG2+0x390>)
 80006b2:	f000 ff7f 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006bc:	484e      	ldr	r0, [pc, #312]	; (80007f8 <display7SEG2+0x390>)
 80006be:	f000 ff79 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c8:	484b      	ldr	r0, [pc, #300]	; (80007f8 <display7SEG2+0x390>)
 80006ca:	f000 ff73 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d4:	4848      	ldr	r0, [pc, #288]	; (80007f8 <display7SEG2+0x390>)
 80006d6:	f000 ff6d 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e0:	4845      	ldr	r0, [pc, #276]	; (80007f8 <display7SEG2+0x390>)
 80006e2:	f000 ff67 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ec:	4842      	ldr	r0, [pc, #264]	; (80007f8 <display7SEG2+0x390>)
 80006ee:	f000 ff61 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 80006f2:	e07d      	b.n	80007f0 <display7SEG2+0x388>
		case 7:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2180      	movs	r1, #128	; 0x80
 80006f8:	483f      	ldr	r0, [pc, #252]	; (80007f8 <display7SEG2+0x390>)
 80006fa:	f000 ff5b 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000704:	483c      	ldr	r0, [pc, #240]	; (80007f8 <display7SEG2+0x390>)
 8000706:	f000 ff55 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000710:	4839      	ldr	r0, [pc, #228]	; (80007f8 <display7SEG2+0x390>)
 8000712:	f000 ff4f 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071c:	4836      	ldr	r0, [pc, #216]	; (80007f8 <display7SEG2+0x390>)
 800071e:	f000 ff49 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000728:	4833      	ldr	r0, [pc, #204]	; (80007f8 <display7SEG2+0x390>)
 800072a:	f000 ff43 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000734:	4830      	ldr	r0, [pc, #192]	; (80007f8 <display7SEG2+0x390>)
 8000736:	f000 ff3d 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000740:	482d      	ldr	r0, [pc, #180]	; (80007f8 <display7SEG2+0x390>)
 8000742:	f000 ff37 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 8000746:	e053      	b.n	80007f0 <display7SEG2+0x388>
		case 8:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2180      	movs	r1, #128	; 0x80
 800074c:	482a      	ldr	r0, [pc, #168]	; (80007f8 <display7SEG2+0x390>)
 800074e:	f000 ff31 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000758:	4827      	ldr	r0, [pc, #156]	; (80007f8 <display7SEG2+0x390>)
 800075a:	f000 ff2b 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000764:	4824      	ldr	r0, [pc, #144]	; (80007f8 <display7SEG2+0x390>)
 8000766:	f000 ff25 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000770:	4821      	ldr	r0, [pc, #132]	; (80007f8 <display7SEG2+0x390>)
 8000772:	f000 ff1f 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800077c:	481e      	ldr	r0, [pc, #120]	; (80007f8 <display7SEG2+0x390>)
 800077e:	f000 ff19 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000788:	481b      	ldr	r0, [pc, #108]	; (80007f8 <display7SEG2+0x390>)
 800078a:	f000 ff13 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000794:	4818      	ldr	r0, [pc, #96]	; (80007f8 <display7SEG2+0x390>)
 8000796:	f000 ff0d 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 800079a:	e029      	b.n	80007f0 <display7SEG2+0x388>
		case 9:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	4815      	ldr	r0, [pc, #84]	; (80007f8 <display7SEG2+0x390>)
 80007a2:	f000 ff07 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ac:	4812      	ldr	r0, [pc, #72]	; (80007f8 <display7SEG2+0x390>)
 80007ae:	f000 ff01 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b8:	480f      	ldr	r0, [pc, #60]	; (80007f8 <display7SEG2+0x390>)
 80007ba:	f000 fefb 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <display7SEG2+0x390>)
 80007c6:	f000 fef5 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007d0:	4809      	ldr	r0, [pc, #36]	; (80007f8 <display7SEG2+0x390>)
 80007d2:	f000 feef 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007dc:	4806      	ldr	r0, [pc, #24]	; (80007f8 <display7SEG2+0x390>)
 80007de:	f000 fee9 	bl	80015b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <display7SEG2+0x390>)
 80007ea:	f000 fee3 	bl	80015b4 <HAL_GPIO_WritePin>
			break;
 80007ee:	bf00      	nop

	}
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40010c00 	.word	0x40010c00

080007fc <ex5>:
 void ex5(){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	  //light1
	  switch (led_red1) {
 8000800:	4b94      	ldr	r3, [pc, #592]	; (8000a54 <ex5+0x258>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d016      	beq.n	8000836 <ex5+0x3a>
 8000808:	2b01      	cmp	r3, #1
 800080a:	d12c      	bne.n	8000866 <ex5+0x6a>
	  	  	  	  case 1:
	  	  	  		HAL_GPIO_WritePin ( LED_RED1_GPIO_Port , LED_RED1_Pin, RESET ) ;
 800080c:	2200      	movs	r2, #0
 800080e:	2102      	movs	r1, #2
 8000810:	4891      	ldr	r0, [pc, #580]	; (8000a58 <ex5+0x25c>)
 8000812:	f000 fecf 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  	  		count_red1--;
 8000816:	4b91      	ldr	r3, [pc, #580]	; (8000a5c <ex5+0x260>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3b01      	subs	r3, #1
 800081c:	4a8f      	ldr	r2, [pc, #572]	; (8000a5c <ex5+0x260>)
 800081e:	6013      	str	r3, [r2, #0]
	  	  	  		if ( count_red1  <= 0 ){
 8000820:	4b8e      	ldr	r3, [pc, #568]	; (8000a5c <ex5+0x260>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	dc1b      	bgt.n	8000860 <ex5+0x64>
	  	  	  			led_red1 = 0;
 8000828:	4b8a      	ldr	r3, [pc, #552]	; (8000a54 <ex5+0x258>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
	  	  	  			count_red1 = 5;
 800082e:	4b8b      	ldr	r3, [pc, #556]	; (8000a5c <ex5+0x260>)
 8000830:	2205      	movs	r2, #5
 8000832:	601a      	str	r2, [r3, #0]
	  	  	  		}
	  	  	  		break;
 8000834:	e014      	b.n	8000860 <ex5+0x64>
	  	  	  	  case 0:
	  	  	  		HAL_GPIO_WritePin ( LED_RED1_GPIO_Port , LED_RED1_Pin , SET ) ;
 8000836:	2201      	movs	r2, #1
 8000838:	2102      	movs	r1, #2
 800083a:	4887      	ldr	r0, [pc, #540]	; (8000a58 <ex5+0x25c>)
 800083c:	f000 feba 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  	  		count_red1--;
 8000840:	4b86      	ldr	r3, [pc, #536]	; (8000a5c <ex5+0x260>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	3b01      	subs	r3, #1
 8000846:	4a85      	ldr	r2, [pc, #532]	; (8000a5c <ex5+0x260>)
 8000848:	6013      	str	r3, [r2, #0]
	  	  	  		if ( count_red1 <= 0 ){
 800084a:	4b84      	ldr	r3, [pc, #528]	; (8000a5c <ex5+0x260>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	dc08      	bgt.n	8000864 <ex5+0x68>
	  	  	  			led_red1 = 1;
 8000852:	4b80      	ldr	r3, [pc, #512]	; (8000a54 <ex5+0x258>)
 8000854:	2201      	movs	r2, #1
 8000856:	601a      	str	r2, [r3, #0]
	  	  	  			count_red1 = 5;
 8000858:	4b80      	ldr	r3, [pc, #512]	; (8000a5c <ex5+0x260>)
 800085a:	2205      	movs	r2, #5
 800085c:	601a      	str	r2, [r3, #0]
	  	  	  		}
	  	  	  	    break;
 800085e:	e001      	b.n	8000864 <ex5+0x68>
	  	  	  		break;
 8000860:	bf00      	nop
 8000862:	e000      	b.n	8000866 <ex5+0x6a>
	  	  	  	    break;
 8000864:	bf00      	nop
	  	  	  }

	  	  	  switch (led_yellow1) {
 8000866:	4b7e      	ldr	r3, [pc, #504]	; (8000a60 <ex5+0x264>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d016      	beq.n	800089c <ex5+0xa0>
 800086e:	2b01      	cmp	r3, #1
 8000870:	d12c      	bne.n	80008cc <ex5+0xd0>
	  	  	 	  	  case 1:
	  	  	 	  		HAL_GPIO_WritePin ( LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin , RESET ) ;
 8000872:	2200      	movs	r2, #0
 8000874:	2104      	movs	r1, #4
 8000876:	4878      	ldr	r0, [pc, #480]	; (8000a58 <ex5+0x25c>)
 8000878:	f000 fe9c 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  	 	  		count_yellow1--;
 800087c:	4b79      	ldr	r3, [pc, #484]	; (8000a64 <ex5+0x268>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3b01      	subs	r3, #1
 8000882:	4a78      	ldr	r2, [pc, #480]	; (8000a64 <ex5+0x268>)
 8000884:	6013      	str	r3, [r2, #0]
	  	  	 	  		if ( count_yellow1  <= 0 ){
 8000886:	4b77      	ldr	r3, [pc, #476]	; (8000a64 <ex5+0x268>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	dc1b      	bgt.n	80008c6 <ex5+0xca>
	  	  	 	  			led_yellow1 = 0;
 800088e:	4b74      	ldr	r3, [pc, #464]	; (8000a60 <ex5+0x264>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
	  	  	 	  			count_yellow1 = 8;
 8000894:	4b73      	ldr	r3, [pc, #460]	; (8000a64 <ex5+0x268>)
 8000896:	2208      	movs	r2, #8
 8000898:	601a      	str	r2, [r3, #0]
	  	  	 	  		}
	  	  	 	  		break;
 800089a:	e014      	b.n	80008c6 <ex5+0xca>
	  	  	 	  	  case 0:
	  	  	 	  		HAL_GPIO_WritePin ( LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin , SET ) ;
 800089c:	2201      	movs	r2, #1
 800089e:	2104      	movs	r1, #4
 80008a0:	486d      	ldr	r0, [pc, #436]	; (8000a58 <ex5+0x25c>)
 80008a2:	f000 fe87 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  	 	  		count_yellow1--;
 80008a6:	4b6f      	ldr	r3, [pc, #444]	; (8000a64 <ex5+0x268>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	4a6d      	ldr	r2, [pc, #436]	; (8000a64 <ex5+0x268>)
 80008ae:	6013      	str	r3, [r2, #0]
	  	  	 	  		if ( count_yellow1 <= 0 ){
 80008b0:	4b6c      	ldr	r3, [pc, #432]	; (8000a64 <ex5+0x268>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dc08      	bgt.n	80008ca <ex5+0xce>
	  	  	 	  			led_yellow1 = 1;
 80008b8:	4b69      	ldr	r3, [pc, #420]	; (8000a60 <ex5+0x264>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	601a      	str	r2, [r3, #0]
	  	  	 	  			count_yellow1 = 2;
 80008be:	4b69      	ldr	r3, [pc, #420]	; (8000a64 <ex5+0x268>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	601a      	str	r2, [r3, #0]
	  	  	 	  		}
	  	  	 	  		break;
 80008c4:	e001      	b.n	80008ca <ex5+0xce>
	  	  	 	  		break;
 80008c6:	bf00      	nop
 80008c8:	e000      	b.n	80008cc <ex5+0xd0>
	  	  	 	  		break;
 80008ca:	bf00      	nop
	  	  	 }
	  	  	 switch (led_green1){
 80008cc:	4b66      	ldr	r3, [pc, #408]	; (8000a68 <ex5+0x26c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d016      	beq.n	8000902 <ex5+0x106>
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d12c      	bne.n	8000932 <ex5+0x136>
	  	  	           case 1:
	  	  		  	  		HAL_GPIO_WritePin ( LED_GREEN1_GPIO_Port , LED_GREEN1_Pin, RESET ) ;
 80008d8:	2200      	movs	r2, #0
 80008da:	2108      	movs	r1, #8
 80008dc:	485e      	ldr	r0, [pc, #376]	; (8000a58 <ex5+0x25c>)
 80008de:	f000 fe69 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  		  	  		count_green1--;
 80008e2:	4b62      	ldr	r3, [pc, #392]	; (8000a6c <ex5+0x270>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	4a60      	ldr	r2, [pc, #384]	; (8000a6c <ex5+0x270>)
 80008ea:	6013      	str	r3, [r2, #0]
	  	  		  	  		if ( count_green1  <= 0 ){
 80008ec:	4b5f      	ldr	r3, [pc, #380]	; (8000a6c <ex5+0x270>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	dc1b      	bgt.n	800092c <ex5+0x130>
	  	  		  	  			led_green1 = 0;
 80008f4:	4b5c      	ldr	r3, [pc, #368]	; (8000a68 <ex5+0x26c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
	  	  		  	  			count_green1 = 7;
 80008fa:	4b5c      	ldr	r3, [pc, #368]	; (8000a6c <ex5+0x270>)
 80008fc:	2207      	movs	r2, #7
 80008fe:	601a      	str	r2, [r3, #0]
	  	  		  	  		}
	  	  		  	  		break;
 8000900:	e014      	b.n	800092c <ex5+0x130>
	  	  		  	  case 0:
	  	  		  	  		HAL_GPIO_WritePin ( LED_GREEN1_GPIO_Port , LED_GREEN1_Pin , SET ) ;
 8000902:	2201      	movs	r2, #1
 8000904:	2108      	movs	r1, #8
 8000906:	4854      	ldr	r0, [pc, #336]	; (8000a58 <ex5+0x25c>)
 8000908:	f000 fe54 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  		  	  		count_green1--;
 800090c:	4b57      	ldr	r3, [pc, #348]	; (8000a6c <ex5+0x270>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3b01      	subs	r3, #1
 8000912:	4a56      	ldr	r2, [pc, #344]	; (8000a6c <ex5+0x270>)
 8000914:	6013      	str	r3, [r2, #0]
	  	  		  	  		if ( count_green1 <= 0 ){
 8000916:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <ex5+0x270>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	dc08      	bgt.n	8000930 <ex5+0x134>
	  	  		  	  			led_green1 = 1;
 800091e:	4b52      	ldr	r3, [pc, #328]	; (8000a68 <ex5+0x26c>)
 8000920:	2201      	movs	r2, #1
 8000922:	601a      	str	r2, [r3, #0]
	  	  		  	  			count_green1 = 3;
 8000924:	4b51      	ldr	r3, [pc, #324]	; (8000a6c <ex5+0x270>)
 8000926:	2203      	movs	r2, #3
 8000928:	601a      	str	r2, [r3, #0]
	  	  		  	  		}
	  	  		  	  	    break;
 800092a:	e001      	b.n	8000930 <ex5+0x134>
	  	  		  	  		break;
 800092c:	bf00      	nop
 800092e:	e000      	b.n	8000932 <ex5+0x136>
	  	  		  	  	    break;
 8000930:	bf00      	nop
	  	  	 }
	  	  //light2
	  	   switch (led_red2) {
 8000932:	4b4f      	ldr	r3, [pc, #316]	; (8000a70 <ex5+0x274>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d01b      	beq.n	8000972 <ex5+0x176>
 800093a:	2b01      	cmp	r3, #1
 800093c:	d131      	bne.n	80009a2 <ex5+0x1a6>
	  	  	  	  	  case 1:
	  	  	  	  		HAL_GPIO_WritePin ( LED_RED2_GPIO_Port , LED_RED2_Pin, RESET ) ;
 800093e:	2200      	movs	r2, #0
 8000940:	2110      	movs	r1, #16
 8000942:	4845      	ldr	r0, [pc, #276]	; (8000a58 <ex5+0x25c>)
 8000944:	f000 fe36 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  	  	  		display7SEG2( count_red2);
 8000948:	4b4a      	ldr	r3, [pc, #296]	; (8000a74 <ex5+0x278>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fd8b 	bl	8000468 <display7SEG2>
	  	  	  	  		count_red2--;
 8000952:	4b48      	ldr	r3, [pc, #288]	; (8000a74 <ex5+0x278>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3b01      	subs	r3, #1
 8000958:	4a46      	ldr	r2, [pc, #280]	; (8000a74 <ex5+0x278>)
 800095a:	6013      	str	r3, [r2, #0]
	  	  	  	  		if ( count_red2  <= 0 ){
 800095c:	4b45      	ldr	r3, [pc, #276]	; (8000a74 <ex5+0x278>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	dc1b      	bgt.n	800099c <ex5+0x1a0>
	  	  	  	  			led_red2 = 0;
 8000964:	4b42      	ldr	r3, [pc, #264]	; (8000a70 <ex5+0x274>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
	  	  	  	  			count_red2 = 5;
 800096a:	4b42      	ldr	r3, [pc, #264]	; (8000a74 <ex5+0x278>)
 800096c:	2205      	movs	r2, #5
 800096e:	601a      	str	r2, [r3, #0]
	  	  	  	  		}
	  	  	  	  		break;
 8000970:	e014      	b.n	800099c <ex5+0x1a0>
	  	  	  	  	  case 0:
	  	  	  	  		HAL_GPIO_WritePin ( LED_RED2_GPIO_Port , LED_RED2_Pin , SET ) ;
 8000972:	2201      	movs	r2, #1
 8000974:	2110      	movs	r1, #16
 8000976:	4838      	ldr	r0, [pc, #224]	; (8000a58 <ex5+0x25c>)
 8000978:	f000 fe1c 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  	  	  		count_red2--;
 800097c:	4b3d      	ldr	r3, [pc, #244]	; (8000a74 <ex5+0x278>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3b01      	subs	r3, #1
 8000982:	4a3c      	ldr	r2, [pc, #240]	; (8000a74 <ex5+0x278>)
 8000984:	6013      	str	r3, [r2, #0]
	  	  	  	  		if ( count_red2 <= 0 ){
 8000986:	4b3b      	ldr	r3, [pc, #236]	; (8000a74 <ex5+0x278>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	dc08      	bgt.n	80009a0 <ex5+0x1a4>
	  	  	  	  			led_red2 = 1;
 800098e:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <ex5+0x274>)
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]
	  	  	  	  			count_red2 = 5;
 8000994:	4b37      	ldr	r3, [pc, #220]	; (8000a74 <ex5+0x278>)
 8000996:	2205      	movs	r2, #5
 8000998:	601a      	str	r2, [r3, #0]
	  	  	  	  		}
	  	  	  	  	    break;
 800099a:	e001      	b.n	80009a0 <ex5+0x1a4>
	  	  	  	  		break;
 800099c:	bf00      	nop
 800099e:	e000      	b.n	80009a2 <ex5+0x1a6>
	  	  	  	  	    break;
 80009a0:	bf00      	nop
	  	  	  	  }

	  	  	  	  switch (led_yellow2) {
 80009a2:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <ex5+0x27c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d01b      	beq.n	80009e2 <ex5+0x1e6>
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d131      	bne.n	8000a12 <ex5+0x216>
	  	  	  	 	  	  case 1:
	  	  	  	 	  		HAL_GPIO_WritePin ( LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin , RESET ) ;
 80009ae:	2200      	movs	r2, #0
 80009b0:	2120      	movs	r1, #32
 80009b2:	4829      	ldr	r0, [pc, #164]	; (8000a58 <ex5+0x25c>)
 80009b4:	f000 fdfe 	bl	80015b4 <HAL_GPIO_WritePin>
		  	  	  	  		display7SEG2( count_yellow2);
 80009b8:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <ex5+0x280>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fd53 	bl	8000468 <display7SEG2>
	  	  	  	 	  		count_yellow2--;
 80009c2:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <ex5+0x280>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	4a2c      	ldr	r2, [pc, #176]	; (8000a7c <ex5+0x280>)
 80009ca:	6013      	str	r3, [r2, #0]
	  	  	  	 	  		if ( count_yellow2  <= 0 ){
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <ex5+0x280>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	dc1b      	bgt.n	8000a0c <ex5+0x210>
	  	  	  	 	  			led_yellow2 = 0;
 80009d4:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <ex5+0x27c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
	  	  	  	 	  			count_yellow2 = 8;
 80009da:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <ex5+0x280>)
 80009dc:	2208      	movs	r2, #8
 80009de:	601a      	str	r2, [r3, #0]
	  	  	  	 	  		}
	  	  	  	 	  		break;
 80009e0:	e014      	b.n	8000a0c <ex5+0x210>
	  	  	  	 	  	  case 0:
	  	  	  	 	  		HAL_GPIO_WritePin ( LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin , SET ) ;
 80009e2:	2201      	movs	r2, #1
 80009e4:	2120      	movs	r1, #32
 80009e6:	481c      	ldr	r0, [pc, #112]	; (8000a58 <ex5+0x25c>)
 80009e8:	f000 fde4 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  	  	 	  		count_yellow2--;
 80009ec:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <ex5+0x280>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	4a22      	ldr	r2, [pc, #136]	; (8000a7c <ex5+0x280>)
 80009f4:	6013      	str	r3, [r2, #0]
	  	  	  	 	  		if ( count_yellow2 <= 0 ){
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <ex5+0x280>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	dc08      	bgt.n	8000a10 <ex5+0x214>
	  	  	  	 	  			led_yellow2 = 1;
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <ex5+0x27c>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	601a      	str	r2, [r3, #0]
	  	  	  	 	  			count_yellow2 = 2;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <ex5+0x280>)
 8000a06:	2202      	movs	r2, #2
 8000a08:	601a      	str	r2, [r3, #0]
	  	  	  	 	  		}
	  	  	  	 	  		break;
 8000a0a:	e001      	b.n	8000a10 <ex5+0x214>
	  	  	  	 	  		break;
 8000a0c:	bf00      	nop
 8000a0e:	e000      	b.n	8000a12 <ex5+0x216>
	  	  	  	 	  		break;
 8000a10:	bf00      	nop
	  	  	  	 }
	  	  	  	 switch (led_green2){
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <ex5+0x284>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d036      	beq.n	8000a88 <ex5+0x28c>
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d14c      	bne.n	8000ab8 <ex5+0x2bc>
	  	  	  	           case 1:
	  	  	  		  	  		HAL_GPIO_WritePin ( LED_GREEN2_GPIO_Port , LED_GREEN2_Pin, RESET ) ;
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2140      	movs	r1, #64	; 0x40
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <ex5+0x25c>)
 8000a24:	f000 fdc6 	bl	80015b4 <HAL_GPIO_WritePin>
	  		  	  	  	  		display7SEG2( count_green2);
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <ex5+0x288>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fd1b 	bl	8000468 <display7SEG2>
	  	  	  		  	  		count_green2--;
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <ex5+0x288>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <ex5+0x288>)
 8000a3a:	6013      	str	r3, [r2, #0]
	  	  	  		  	  		if ( count_green2  <= 0 ){
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <ex5+0x288>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	dc36      	bgt.n	8000ab2 <ex5+0x2b6>
	  	  	  		  	  			led_green2 = 0;
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <ex5+0x284>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
	  	  	  		  	  			count_green2 = 7;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <ex5+0x288>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
	  	  	  		  	  		}
	  	  	  		  	  		break;
 8000a50:	e02f      	b.n	8000ab2 <ex5+0x2b6>
 8000a52:	bf00      	nop
 8000a54:	20000000 	.word	0x20000000
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	20000004 	.word	0x20000004
 8000a60:	20000068 	.word	0x20000068
 8000a64:	20000008 	.word	0x20000008
 8000a68:	2000006c 	.word	0x2000006c
 8000a6c:	2000000c 	.word	0x2000000c
 8000a70:	20000070 	.word	0x20000070
 8000a74:	20000010 	.word	0x20000010
 8000a78:	20000074 	.word	0x20000074
 8000a7c:	20000014 	.word	0x20000014
 8000a80:	20000018 	.word	0x20000018
 8000a84:	2000001c 	.word	0x2000001c
	  	  	  		  	  case 0:
	  	  	  		  	  		HAL_GPIO_WritePin ( LED_GREEN2_GPIO_Port , LED_GREEN2_Pin , SET ) ;
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2140      	movs	r1, #64	; 0x40
 8000a8c:	4895      	ldr	r0, [pc, #596]	; (8000ce4 <ex5+0x4e8>)
 8000a8e:	f000 fd91 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  	  		  	  		count_green2--;
 8000a92:	4b95      	ldr	r3, [pc, #596]	; (8000ce8 <ex5+0x4ec>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	4a93      	ldr	r2, [pc, #588]	; (8000ce8 <ex5+0x4ec>)
 8000a9a:	6013      	str	r3, [r2, #0]
	  	  	  		  	  		if ( count_green2 <= 0 ){
 8000a9c:	4b92      	ldr	r3, [pc, #584]	; (8000ce8 <ex5+0x4ec>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	dc08      	bgt.n	8000ab6 <ex5+0x2ba>
	  	  	  		  	  			led_green2 = 1;
 8000aa4:	4b91      	ldr	r3, [pc, #580]	; (8000cec <ex5+0x4f0>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	601a      	str	r2, [r3, #0]
	  	  	  		  	  			count_green2 = 3;
 8000aaa:	4b8f      	ldr	r3, [pc, #572]	; (8000ce8 <ex5+0x4ec>)
 8000aac:	2203      	movs	r2, #3
 8000aae:	601a      	str	r2, [r3, #0]
	  	  	  		  	  		}
	  	  	  		  	  	    break;
 8000ab0:	e001      	b.n	8000ab6 <ex5+0x2ba>
	  	  	  		  	  		break;
 8000ab2:	bf00      	nop
 8000ab4:	e000      	b.n	8000ab8 <ex5+0x2bc>
	  	  	  		  	  	    break;
 8000ab6:	bf00      	nop
	  	  	  	 }

	  	  	 //light3
	  	  	 switch (led_red3) {
 8000ab8:	4b8d      	ldr	r3, [pc, #564]	; (8000cf0 <ex5+0x4f4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d01b      	beq.n	8000af8 <ex5+0x2fc>
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d131      	bne.n	8000b28 <ex5+0x32c>
	  	  		  	  	  case 1:
	  	  		  	  		HAL_GPIO_WritePin ( LED_RED3_GPIO_Port , LED_RED3_Pin, RESET ) ;
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	4886      	ldr	r0, [pc, #536]	; (8000ce4 <ex5+0x4e8>)
 8000aca:	f000 fd73 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  		  	  		display7SEG1( count_red3);
 8000ace:	4b89      	ldr	r3, [pc, #548]	; (8000cf4 <ex5+0x4f8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fb3a 	bl	800014c <display7SEG1>
	  	  		  	  		count_red3--;
 8000ad8:	4b86      	ldr	r3, [pc, #536]	; (8000cf4 <ex5+0x4f8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	4a85      	ldr	r2, [pc, #532]	; (8000cf4 <ex5+0x4f8>)
 8000ae0:	6013      	str	r3, [r2, #0]
	  	  		  	  		if ( count_red3  <= 0 ){
 8000ae2:	4b84      	ldr	r3, [pc, #528]	; (8000cf4 <ex5+0x4f8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	dc1b      	bgt.n	8000b22 <ex5+0x326>
	  	  		  	  			led_red3 = 0;
 8000aea:	4b81      	ldr	r3, [pc, #516]	; (8000cf0 <ex5+0x4f4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
	  	  		  	  			count_red3 = 5;
 8000af0:	4b80      	ldr	r3, [pc, #512]	; (8000cf4 <ex5+0x4f8>)
 8000af2:	2205      	movs	r2, #5
 8000af4:	601a      	str	r2, [r3, #0]
	  	  		  	  		}
	  	  		  	  		break;
 8000af6:	e014      	b.n	8000b22 <ex5+0x326>
	  	  		  	  	  case 0:
	  	  		  	  		HAL_GPIO_WritePin ( LED_RED3_GPIO_Port , LED_RED3_Pin , SET ) ;
 8000af8:	2201      	movs	r2, #1
 8000afa:	2180      	movs	r1, #128	; 0x80
 8000afc:	4879      	ldr	r0, [pc, #484]	; (8000ce4 <ex5+0x4e8>)
 8000afe:	f000 fd59 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  		  	  		count_red3--;
 8000b02:	4b7c      	ldr	r3, [pc, #496]	; (8000cf4 <ex5+0x4f8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	4a7a      	ldr	r2, [pc, #488]	; (8000cf4 <ex5+0x4f8>)
 8000b0a:	6013      	str	r3, [r2, #0]
	  	  		  	  		if ( count_red3 <= 0 ){
 8000b0c:	4b79      	ldr	r3, [pc, #484]	; (8000cf4 <ex5+0x4f8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	dc08      	bgt.n	8000b26 <ex5+0x32a>
	  	  		  	  			led_red3 = 1;
 8000b14:	4b76      	ldr	r3, [pc, #472]	; (8000cf0 <ex5+0x4f4>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
	  	  		  	  			count_red3 = 5;
 8000b1a:	4b76      	ldr	r3, [pc, #472]	; (8000cf4 <ex5+0x4f8>)
 8000b1c:	2205      	movs	r2, #5
 8000b1e:	601a      	str	r2, [r3, #0]
	  	  		  	  		}
	  	  		  	  	    break;
 8000b20:	e001      	b.n	8000b26 <ex5+0x32a>
	  	  		  	  		break;
 8000b22:	bf00      	nop
 8000b24:	e000      	b.n	8000b28 <ex5+0x32c>
	  	  		  	  	    break;
 8000b26:	bf00      	nop
	  	  		  	  }

	  	  		  	  switch (led_yellow3) {
 8000b28:	4b73      	ldr	r3, [pc, #460]	; (8000cf8 <ex5+0x4fc>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d01c      	beq.n	8000b6a <ex5+0x36e>
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d133      	bne.n	8000b9c <ex5+0x3a0>
	  	  		  	 	  	  case 1:
	  	  		  	 	  		HAL_GPIO_WritePin ( LED_YELLOW3_GPIO_Port , LED_YELLOW3_Pin , RESET ) ;
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3a:	486a      	ldr	r0, [pc, #424]	; (8000ce4 <ex5+0x4e8>)
 8000b3c:	f000 fd3a 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  		  	 	  		display7SEG1( count_yellow3);
 8000b40:	4b6e      	ldr	r3, [pc, #440]	; (8000cfc <ex5+0x500>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fb01 	bl	800014c <display7SEG1>
	  	  		  	 	  		count_yellow3--;
 8000b4a:	4b6c      	ldr	r3, [pc, #432]	; (8000cfc <ex5+0x500>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	4a6a      	ldr	r2, [pc, #424]	; (8000cfc <ex5+0x500>)
 8000b52:	6013      	str	r3, [r2, #0]
	  	  		  	 	  		if ( count_yellow3  <= 0 ){
 8000b54:	4b69      	ldr	r3, [pc, #420]	; (8000cfc <ex5+0x500>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dc1c      	bgt.n	8000b96 <ex5+0x39a>
	  	  		  	 	  			led_yellow3 = 0;
 8000b5c:	4b66      	ldr	r3, [pc, #408]	; (8000cf8 <ex5+0x4fc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
	  	  		  	 	  			count_yellow3 = 8;
 8000b62:	4b66      	ldr	r3, [pc, #408]	; (8000cfc <ex5+0x500>)
 8000b64:	2208      	movs	r2, #8
 8000b66:	601a      	str	r2, [r3, #0]
	  	  		  	 	  		}
	  	  		  	 	  		break;
 8000b68:	e015      	b.n	8000b96 <ex5+0x39a>
	  	  		  	 	  	  case 0:
	  	  		  	 	  		HAL_GPIO_WritePin ( LED_YELLOW3_GPIO_Port , LED_YELLOW3_Pin , SET ) ;
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b70:	485c      	ldr	r0, [pc, #368]	; (8000ce4 <ex5+0x4e8>)
 8000b72:	f000 fd1f 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  		  	 	  		count_yellow3--;
 8000b76:	4b61      	ldr	r3, [pc, #388]	; (8000cfc <ex5+0x500>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	4a5f      	ldr	r2, [pc, #380]	; (8000cfc <ex5+0x500>)
 8000b7e:	6013      	str	r3, [r2, #0]
	  	  		  	 	  		if ( count_yellow3 <= 0 ){
 8000b80:	4b5e      	ldr	r3, [pc, #376]	; (8000cfc <ex5+0x500>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	dc08      	bgt.n	8000b9a <ex5+0x39e>
	  	  		  	 	  			led_yellow3 = 1;
 8000b88:	4b5b      	ldr	r3, [pc, #364]	; (8000cf8 <ex5+0x4fc>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
	  	  		  	 	  			count_yellow3 = 2;
 8000b8e:	4b5b      	ldr	r3, [pc, #364]	; (8000cfc <ex5+0x500>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	601a      	str	r2, [r3, #0]
	  	  		  	 	  		}
	  	  		  	 	  		break;
 8000b94:	e001      	b.n	8000b9a <ex5+0x39e>
	  	  		  	 	  		break;
 8000b96:	bf00      	nop
 8000b98:	e000      	b.n	8000b9c <ex5+0x3a0>
	  	  		  	 	  		break;
 8000b9a:	bf00      	nop
	  	  		  	 }
	  	  		  	 switch (led_green3){
 8000b9c:	4b58      	ldr	r3, [pc, #352]	; (8000d00 <ex5+0x504>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d01c      	beq.n	8000bde <ex5+0x3e2>
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d133      	bne.n	8000c10 <ex5+0x414>
	  	  		  	           case 1:
	  	  		  		  	  		HAL_GPIO_WritePin ( LED_GREEN3_GPIO_Port , LED_GREEN3_Pin, RESET ) ;
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bae:	484d      	ldr	r0, [pc, #308]	; (8000ce4 <ex5+0x4e8>)
 8000bb0:	f000 fd00 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  		  		  	  		display7SEG1( count_green3);
 8000bb4:	4b53      	ldr	r3, [pc, #332]	; (8000d04 <ex5+0x508>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fac7 	bl	800014c <display7SEG1>
	  	  		  		  	  		count_green3--;
 8000bbe:	4b51      	ldr	r3, [pc, #324]	; (8000d04 <ex5+0x508>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	4a4f      	ldr	r2, [pc, #316]	; (8000d04 <ex5+0x508>)
 8000bc6:	6013      	str	r3, [r2, #0]
	  	  		  		  	  		if ( count_green3  <= 0 ){
 8000bc8:	4b4e      	ldr	r3, [pc, #312]	; (8000d04 <ex5+0x508>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	dc1c      	bgt.n	8000c0a <ex5+0x40e>
	  	  		  		  	  			led_green3 = 0;
 8000bd0:	4b4b      	ldr	r3, [pc, #300]	; (8000d00 <ex5+0x504>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
	  	  		  		  	  			count_green3 = 7;
 8000bd6:	4b4b      	ldr	r3, [pc, #300]	; (8000d04 <ex5+0x508>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
	  	  		  		  	  		}
	  	  		  		  	  		break;
 8000bdc:	e015      	b.n	8000c0a <ex5+0x40e>
	  	  		  		  	  case 0:
	  	  		  		  	  		HAL_GPIO_WritePin ( LED_GREEN3_GPIO_Port , LED_GREEN3_Pin , SET ) ;
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be4:	483f      	ldr	r0, [pc, #252]	; (8000ce4 <ex5+0x4e8>)
 8000be6:	f000 fce5 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  		  		  	  		count_green3--;
 8000bea:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <ex5+0x508>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	4a44      	ldr	r2, [pc, #272]	; (8000d04 <ex5+0x508>)
 8000bf2:	6013      	str	r3, [r2, #0]
	  	  		  		  	  		if ( count_green3 <= 0 ){
 8000bf4:	4b43      	ldr	r3, [pc, #268]	; (8000d04 <ex5+0x508>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	dc08      	bgt.n	8000c0e <ex5+0x412>
	  	  		  		  	  			led_green3 = 1;
 8000bfc:	4b40      	ldr	r3, [pc, #256]	; (8000d00 <ex5+0x504>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	601a      	str	r2, [r3, #0]
	  	  		  		  	  			count_green3 = 3;
 8000c02:	4b40      	ldr	r3, [pc, #256]	; (8000d04 <ex5+0x508>)
 8000c04:	2203      	movs	r2, #3
 8000c06:	601a      	str	r2, [r3, #0]
	  	  		  		  	  		}
	  	  		  		  	  	    break;
 8000c08:	e001      	b.n	8000c0e <ex5+0x412>
	  	  		  		  	  		break;
 8000c0a:	bf00      	nop
 8000c0c:	e000      	b.n	8000c10 <ex5+0x414>
	  	  		  		  	  	    break;
 8000c0e:	bf00      	nop
	  	  		  	 }

	  	  		  //light4
	  	  		 switch (led_red4) {
 8000c10:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <ex5+0x50c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d017      	beq.n	8000c48 <ex5+0x44c>
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d12e      	bne.n	8000c7a <ex5+0x47e>
	  	  			  	  	  case 1:
	  	  			  	  		HAL_GPIO_WritePin ( LED_RED4_GPIO_Port , LED_RED4_Pin, RESET ) ;
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c22:	4830      	ldr	r0, [pc, #192]	; (8000ce4 <ex5+0x4e8>)
 8000c24:	f000 fcc6 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  			  	  		count_red4--;
 8000c28:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <ex5+0x510>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	4a37      	ldr	r2, [pc, #220]	; (8000d0c <ex5+0x510>)
 8000c30:	6013      	str	r3, [r2, #0]
	  	  			  	  		if ( count_red4  <= 0 ){
 8000c32:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <ex5+0x510>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	dc1c      	bgt.n	8000c74 <ex5+0x478>
	  	  			  	  			led_red4 = 0;
 8000c3a:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <ex5+0x50c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
	  	  			  	  			count_red4 = 5;
 8000c40:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <ex5+0x510>)
 8000c42:	2205      	movs	r2, #5
 8000c44:	601a      	str	r2, [r3, #0]
	  	  			  	  		}
	  	  			  	  		break;
 8000c46:	e015      	b.n	8000c74 <ex5+0x478>
	  	  			  	  	  case 0:
	  	  			  	  		HAL_GPIO_WritePin ( LED_RED4_GPIO_Port , LED_RED4_Pin , SET ) ;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4e:	4825      	ldr	r0, [pc, #148]	; (8000ce4 <ex5+0x4e8>)
 8000c50:	f000 fcb0 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  			  	  		count_red4--;
 8000c54:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <ex5+0x510>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	4a2c      	ldr	r2, [pc, #176]	; (8000d0c <ex5+0x510>)
 8000c5c:	6013      	str	r3, [r2, #0]
	  	  			  	  		if ( count_red4 <= 0 ){
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <ex5+0x510>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	dc08      	bgt.n	8000c78 <ex5+0x47c>
	  	  			  	  			led_red4 = 1;
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <ex5+0x50c>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]
	  	  			  	  			count_red4 = 5;
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <ex5+0x510>)
 8000c6e:	2205      	movs	r2, #5
 8000c70:	601a      	str	r2, [r3, #0]
	  	  			  	  		}
	  	  			  	  	    break;
 8000c72:	e001      	b.n	8000c78 <ex5+0x47c>
	  	  			  	  		break;
 8000c74:	bf00      	nop
 8000c76:	e000      	b.n	8000c7a <ex5+0x47e>
	  	  			  	  	    break;
 8000c78:	bf00      	nop
	  	  			  	  }

	  	  			  	  switch (led_yellow4) {
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <ex5+0x514>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d017      	beq.n	8000cb2 <ex5+0x4b6>
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d149      	bne.n	8000d1a <ex5+0x51e>
	  	  			  	 	  	  case 1:
	  	  			  	 	  		HAL_GPIO_WritePin ( LED_YELLOW4_GPIO_Port , LED_YELLOW4_Pin , RESET ) ;
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c8c:	4815      	ldr	r0, [pc, #84]	; (8000ce4 <ex5+0x4e8>)
 8000c8e:	f000 fc91 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  			  	 	  		count_yellow4--;
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <ex5+0x518>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	4a1e      	ldr	r2, [pc, #120]	; (8000d14 <ex5+0x518>)
 8000c9a:	6013      	str	r3, [r2, #0]
	  	  			  	 	  		if ( count_yellow4  <= 0 ){
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <ex5+0x518>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	dc1c      	bgt.n	8000cde <ex5+0x4e2>
	  	  			  	 	  			led_yellow4 = 0;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <ex5+0x514>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
	  	  			  	 	  			count_yellow4 = 8;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <ex5+0x518>)
 8000cac:	2208      	movs	r2, #8
 8000cae:	601a      	str	r2, [r3, #0]
	  	  			  	 	  		}
	  	  			  	 	  		break;
 8000cb0:	e015      	b.n	8000cde <ex5+0x4e2>
	  	  			  	 	  	  case 0:
	  	  			  	 	  		HAL_GPIO_WritePin ( LED_YELLOW4_GPIO_Port , LED_YELLOW4_Pin , SET ) ;
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb8:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <ex5+0x4e8>)
 8000cba:	f000 fc7b 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  			  	 	  		count_yellow4--;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <ex5+0x518>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <ex5+0x518>)
 8000cc6:	6013      	str	r3, [r2, #0]
	  	  			  	 	  		if ( count_yellow4 <= 0 ){
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <ex5+0x518>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	dc23      	bgt.n	8000d18 <ex5+0x51c>
	  	  			  	 	  			led_yellow4 = 1;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <ex5+0x514>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
	  	  			  	 	  			count_yellow4 = 2;
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <ex5+0x518>)
 8000cd8:	2202      	movs	r2, #2
 8000cda:	601a      	str	r2, [r3, #0]
	  	  			  	 	  		}
	  	  			  	 	  		break;
 8000cdc:	e01c      	b.n	8000d18 <ex5+0x51c>
	  	  			  	 	  		break;
 8000cde:	bf00      	nop
 8000ce0:	e01b      	b.n	8000d1a <ex5+0x51e>
 8000ce2:	bf00      	nop
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	2000001c 	.word	0x2000001c
 8000cec:	20000018 	.word	0x20000018
 8000cf0:	20000020 	.word	0x20000020
 8000cf4:	20000024 	.word	0x20000024
 8000cf8:	20000078 	.word	0x20000078
 8000cfc:	20000028 	.word	0x20000028
 8000d00:	2000007c 	.word	0x2000007c
 8000d04:	2000002c 	.word	0x2000002c
 8000d08:	20000080 	.word	0x20000080
 8000d0c:	20000030 	.word	0x20000030
 8000d10:	20000084 	.word	0x20000084
 8000d14:	20000034 	.word	0x20000034
	  	  			  	 	  		break;
 8000d18:	bf00      	nop
	  	  			  	 }
	  	  			  	 switch (led_green4){
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <ex5+0x58c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d017      	beq.n	8000d52 <ex5+0x556>
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d12e      	bne.n	8000d84 <ex5+0x588>
	  	  			  	           case 1:
	  	  			  		  	  		HAL_GPIO_WritePin ( LED_GREEN4_GPIO_Port , LED_GREEN4_Pin, RESET ) ;
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2c:	4817      	ldr	r0, [pc, #92]	; (8000d8c <ex5+0x590>)
 8000d2e:	f000 fc41 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  			  		  	  		count_green4--;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <ex5+0x594>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	4a15      	ldr	r2, [pc, #84]	; (8000d90 <ex5+0x594>)
 8000d3a:	6013      	str	r3, [r2, #0]
	  	  			  		  	  		if ( count_green4  <= 0 ){
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <ex5+0x594>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dc1c      	bgt.n	8000d7e <ex5+0x582>
	  	  			  		  	  			led_green4 = 0;
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <ex5+0x58c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
	  	  			  		  	  			count_green4 = 7;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <ex5+0x594>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
	  	  			  		  	  		}
	  	  			  		  	  		break;
 8000d50:	e015      	b.n	8000d7e <ex5+0x582>
	  	  			  		  	  case 0:
	  	  			  		  	  		HAL_GPIO_WritePin ( LED_GREEN4_GPIO_Port , LED_GREEN4_Pin , SET ) ;
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <ex5+0x590>)
 8000d5a:	f000 fc2b 	bl	80015b4 <HAL_GPIO_WritePin>
	  	  			  		  	  		count_green4--;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <ex5+0x594>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <ex5+0x594>)
 8000d66:	6013      	str	r3, [r2, #0]
	  	  			  		  	  		if ( count_green4 <= 0 ){
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <ex5+0x594>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	dc08      	bgt.n	8000d82 <ex5+0x586>
	  	  			  		  	  			led_green4 = 1;
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <ex5+0x58c>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
	  	  			  		  	  			count_green4   = 3;
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <ex5+0x594>)
 8000d78:	2203      	movs	r2, #3
 8000d7a:	601a      	str	r2, [r3, #0]
	  	  			  		  	  		}
	  	  			  		  	  	    break;
 8000d7c:	e001      	b.n	8000d82 <ex5+0x586>
	  	  			  		  	  		break;
 8000d7e:	bf00      	nop
 8000d80:	e000      	b.n	8000d84 <ex5+0x588>
	  	  			  		  	  	    break;
 8000d82:	bf00      	nop
	  	  			  	 }

 }
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000038 	.word	0x20000038
 8000d8c:	40010800 	.word	0x40010800
 8000d90:	2000003c 	.word	0x2000003c

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d98:	f000 f928 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9c:	f000 f809 	bl	8000db2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da0:	f000 f842 	bl	8000e28 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  ex5();
 8000da4:	f7ff fd2a 	bl	80007fc <ex5>
	  HAL_Delay (1000) ;
 8000da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dac:	f000 f980 	bl	80010b0 <HAL_Delay>
	  ex5();
 8000db0:	e7f8      	b.n	8000da4 <main+0x10>

08000db2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b090      	sub	sp, #64	; 0x40
 8000db6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db8:	f107 0318 	add.w	r3, r7, #24
 8000dbc:	2228      	movs	r2, #40	; 0x28
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 f81b 	bl	8001dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ddc:	2310      	movs	r3, #16
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 fbfb 	bl	80015e4 <HAL_RCC_OscConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000df4:	f000 f86e 	bl	8000ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df8:	230f      	movs	r3, #15
 8000dfa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fe67 	bl	8001ae4 <HAL_RCC_ClockConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e1c:	f000 f85a 	bl	8000ed4 <Error_Handler>
  }
}
 8000e20:	bf00      	nop
 8000e22:	3740      	adds	r7, #64	; 0x40
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <MX_GPIO_Init+0xa0>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <MX_GPIO_Init+0xa0>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <MX_GPIO_Init+0xa0>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <MX_GPIO_Init+0xa0>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <MX_GPIO_Init+0xa0>)
 8000e5a:	f043 0308 	orr.w	r3, r3, #8
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <MX_GPIO_Init+0xa0>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0308 	and.w	r3, r3, #8
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8000e72:	4816      	ldr	r0, [pc, #88]	; (8000ecc <MX_GPIO_Init+0xa4>)
 8000e74:	f000 fb9e 	bl	80015b4 <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|LED_RED3_Pin|LED_YELLOW3_Pin
                          |LED_GREEN3_Pin|LED_RED4_Pin|LED_YELLOW4_Pin|LED_GREEN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d2_Pin
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000e7e:	4814      	ldr	r0, [pc, #80]	; (8000ed0 <MX_GPIO_Init+0xa8>)
 8000e80:	f000 fb98 	bl	80015b4 <HAL_GPIO_WritePin>
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin LED_RED3_Pin LED_YELLOW3_Pin
                           LED_GREEN3_Pin LED_RED4_Pin LED_YELLOW4_Pin LED_GREEN4_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000e84:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8000e88:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|LED_RED3_Pin|LED_YELLOW3_Pin
                          |LED_GREEN3_Pin|LED_RED4_Pin|LED_YELLOW4_Pin|LED_GREEN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2302      	movs	r3, #2
 8000e94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480b      	ldr	r0, [pc, #44]	; (8000ecc <MX_GPIO_Init+0xa4>)
 8000e9e:	f000 fa0f 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d_Pin
                           e_Pin f_Pin g_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d2_Pin
 8000ea2:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000ea6:	60bb      	str	r3, [r7, #8]
                          |e2_Pin|f2_Pin|g2_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_GPIO_Init+0xa8>)
 8000ebc:	f000 fa00 	bl	80012c0 <HAL_GPIO_Init>

}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40010800 	.word	0x40010800
 8000ed0:	40010c00 	.word	0x40010c00

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_MspInit+0x5c>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <HAL_MspInit+0x5c>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6193      	str	r3, [r2, #24]
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_MspInit+0x5c>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_MspInit+0x5c>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <HAL_MspInit+0x5c>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	61d3      	str	r3, [r2, #28]
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_MspInit+0x5c>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_MspInit+0x60>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_MspInit+0x60>)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010000 	.word	0x40010000

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8a:	f000 f875 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
	...

08000fa0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fa2:	490d      	ldr	r1, [pc, #52]	; (8000fd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	; (8000fe4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fc6:	f7ff ffe4 	bl	8000f92 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f000 fef3 	bl	8001db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fce:	f7ff fee1 	bl	8000d94 <main>
  bx lr
 8000fd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8000fdc:	08001e4c 	.word	0x08001e4c
  ldr r2, =_sbss
 8000fe0:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8000fe4:	2000008c 	.word	0x2000008c

08000fe8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC1_2_IRQHandler>
	...

08000fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_Init+0x28>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <HAL_Init+0x28>)
 8000ff6:	f043 0310 	orr.w	r3, r3, #16
 8000ffa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f000 f92b 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001002:	200f      	movs	r0, #15
 8001004:	f000 f808 	bl	8001018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001008:	f7ff ff6a 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40022000 	.word	0x40022000

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x54>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x58>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f935 	bl	80012a6 <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e00e      	b.n	8001064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d80a      	bhi.n	8001062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f000 f90b 	bl	800126e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <HAL_InitTick+0x5c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000040 	.word	0x20000040
 8001070:	20000048 	.word	0x20000048
 8001074:	20000044 	.word	0x20000044

08001078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_IncTick+0x1c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_IncTick+0x20>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a03      	ldr	r2, [pc, #12]	; (8001098 <HAL_IncTick+0x20>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	20000048 	.word	0x20000048
 8001098:	20000088 	.word	0x20000088

0800109c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <HAL_GetTick+0x10>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	20000088 	.word	0x20000088

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff fff0 	bl	800109c <HAL_GetTick>
 80010bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c8:	d005      	beq.n	80010d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_Delay+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d6:	bf00      	nop
 80010d8:	f7ff ffe0 	bl	800109c <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <HAL_Delay+0x28>
  {
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000048 	.word	0x20000048

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	60d3      	str	r3, [r2, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f7ff ff90 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff49 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff5e 	bl	8001140 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff90 	bl	80011b0 <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5f 	bl	800115c <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffb0 	bl	8001214 <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b08b      	sub	sp, #44	; 0x2c
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d2:	e148      	b.n	8001566 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012d4:	2201      	movs	r2, #1
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f040 8137 	bne.w	8001560 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4aa3      	ldr	r2, [pc, #652]	; (8001584 <HAL_GPIO_Init+0x2c4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d05e      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 80012fc:	4aa1      	ldr	r2, [pc, #644]	; (8001584 <HAL_GPIO_Init+0x2c4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d875      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 8001302:	4aa1      	ldr	r2, [pc, #644]	; (8001588 <HAL_GPIO_Init+0x2c8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d058      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 8001308:	4a9f      	ldr	r2, [pc, #636]	; (8001588 <HAL_GPIO_Init+0x2c8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d86f      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 800130e:	4a9f      	ldr	r2, [pc, #636]	; (800158c <HAL_GPIO_Init+0x2cc>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d052      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 8001314:	4a9d      	ldr	r2, [pc, #628]	; (800158c <HAL_GPIO_Init+0x2cc>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d869      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 800131a:	4a9d      	ldr	r2, [pc, #628]	; (8001590 <HAL_GPIO_Init+0x2d0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d04c      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 8001320:	4a9b      	ldr	r2, [pc, #620]	; (8001590 <HAL_GPIO_Init+0x2d0>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d863      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 8001326:	4a9b      	ldr	r2, [pc, #620]	; (8001594 <HAL_GPIO_Init+0x2d4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d046      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 800132c:	4a99      	ldr	r2, [pc, #612]	; (8001594 <HAL_GPIO_Init+0x2d4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d85d      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 8001332:	2b12      	cmp	r3, #18
 8001334:	d82a      	bhi.n	800138c <HAL_GPIO_Init+0xcc>
 8001336:	2b12      	cmp	r3, #18
 8001338:	d859      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 800133a:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <HAL_GPIO_Init+0x80>)
 800133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001340:	080013bb 	.word	0x080013bb
 8001344:	08001395 	.word	0x08001395
 8001348:	080013a7 	.word	0x080013a7
 800134c:	080013e9 	.word	0x080013e9
 8001350:	080013ef 	.word	0x080013ef
 8001354:	080013ef 	.word	0x080013ef
 8001358:	080013ef 	.word	0x080013ef
 800135c:	080013ef 	.word	0x080013ef
 8001360:	080013ef 	.word	0x080013ef
 8001364:	080013ef 	.word	0x080013ef
 8001368:	080013ef 	.word	0x080013ef
 800136c:	080013ef 	.word	0x080013ef
 8001370:	080013ef 	.word	0x080013ef
 8001374:	080013ef 	.word	0x080013ef
 8001378:	080013ef 	.word	0x080013ef
 800137c:	080013ef 	.word	0x080013ef
 8001380:	080013ef 	.word	0x080013ef
 8001384:	0800139d 	.word	0x0800139d
 8001388:	080013b1 	.word	0x080013b1
 800138c:	4a82      	ldr	r2, [pc, #520]	; (8001598 <HAL_GPIO_Init+0x2d8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001392:	e02c      	b.n	80013ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	623b      	str	r3, [r7, #32]
          break;
 800139a:	e029      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	3304      	adds	r3, #4
 80013a2:	623b      	str	r3, [r7, #32]
          break;
 80013a4:	e024      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	3308      	adds	r3, #8
 80013ac:	623b      	str	r3, [r7, #32]
          break;
 80013ae:	e01f      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	330c      	adds	r3, #12
 80013b6:	623b      	str	r3, [r7, #32]
          break;
 80013b8:	e01a      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013c2:	2304      	movs	r3, #4
 80013c4:	623b      	str	r3, [r7, #32]
          break;
 80013c6:	e013      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d105      	bne.n	80013dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d0:	2308      	movs	r3, #8
 80013d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	611a      	str	r2, [r3, #16]
          break;
 80013da:	e009      	b.n	80013f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013dc:	2308      	movs	r3, #8
 80013de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	615a      	str	r2, [r3, #20]
          break;
 80013e6:	e003      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
          break;
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          break;
 80013ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2bff      	cmp	r3, #255	; 0xff
 80013f4:	d801      	bhi.n	80013fa <HAL_GPIO_Init+0x13a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	e001      	b.n	80013fe <HAL_GPIO_Init+0x13e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3304      	adds	r3, #4
 80013fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2bff      	cmp	r3, #255	; 0xff
 8001404:	d802      	bhi.n	800140c <HAL_GPIO_Init+0x14c>
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	e002      	b.n	8001412 <HAL_GPIO_Init+0x152>
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	3b08      	subs	r3, #8
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	210f      	movs	r1, #15
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	401a      	ands	r2, r3
 8001424:	6a39      	ldr	r1, [r7, #32]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	fa01 f303 	lsl.w	r3, r1, r3
 800142c:	431a      	orrs	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8090 	beq.w	8001560 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001440:	4b56      	ldr	r3, [pc, #344]	; (800159c <HAL_GPIO_Init+0x2dc>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a55      	ldr	r2, [pc, #340]	; (800159c <HAL_GPIO_Init+0x2dc>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b53      	ldr	r3, [pc, #332]	; (800159c <HAL_GPIO_Init+0x2dc>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001458:	4a51      	ldr	r2, [pc, #324]	; (80015a0 <HAL_GPIO_Init+0x2e0>)
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001464:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4013      	ands	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a49      	ldr	r2, [pc, #292]	; (80015a4 <HAL_GPIO_Init+0x2e4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d00d      	beq.n	80014a0 <HAL_GPIO_Init+0x1e0>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a48      	ldr	r2, [pc, #288]	; (80015a8 <HAL_GPIO_Init+0x2e8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d007      	beq.n	800149c <HAL_GPIO_Init+0x1dc>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a47      	ldr	r2, [pc, #284]	; (80015ac <HAL_GPIO_Init+0x2ec>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d101      	bne.n	8001498 <HAL_GPIO_Init+0x1d8>
 8001494:	2302      	movs	r3, #2
 8001496:	e004      	b.n	80014a2 <HAL_GPIO_Init+0x1e2>
 8001498:	2303      	movs	r3, #3
 800149a:	e002      	b.n	80014a2 <HAL_GPIO_Init+0x1e2>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <HAL_GPIO_Init+0x1e2>
 80014a0:	2300      	movs	r3, #0
 80014a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a4:	f002 0203 	and.w	r2, r2, #3
 80014a8:	0092      	lsls	r2, r2, #2
 80014aa:	4093      	lsls	r3, r2
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014b2:	493b      	ldr	r1, [pc, #236]	; (80015a0 <HAL_GPIO_Init+0x2e0>)
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	3302      	adds	r3, #2
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014cc:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4937      	ldr	r1, [pc, #220]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014da:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	4933      	ldr	r1, [pc, #204]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d006      	beq.n	8001502 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014f4:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	492d      	ldr	r1, [pc, #180]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001502:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	43db      	mvns	r3, r3
 800150a:	4929      	ldr	r1, [pc, #164]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 800150c:	4013      	ands	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d006      	beq.n	800152a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	4923      	ldr	r1, [pc, #140]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	608b      	str	r3, [r1, #8]
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	43db      	mvns	r3, r3
 8001532:	491f      	ldr	r1, [pc, #124]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 8001534:	4013      	ands	r3, r2
 8001536:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d006      	beq.n	8001552 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	4919      	ldr	r1, [pc, #100]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	60cb      	str	r3, [r1, #12]
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	43db      	mvns	r3, r3
 800155a:	4915      	ldr	r1, [pc, #84]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 800155c:	4013      	ands	r3, r2
 800155e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	3301      	adds	r3, #1
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	f47f aeaf 	bne.w	80012d4 <HAL_GPIO_Init+0x14>
  }
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	372c      	adds	r7, #44	; 0x2c
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	10320000 	.word	0x10320000
 8001588:	10310000 	.word	0x10310000
 800158c:	10220000 	.word	0x10220000
 8001590:	10210000 	.word	0x10210000
 8001594:	10120000 	.word	0x10120000
 8001598:	10110000 	.word	0x10110000
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010000 	.word	0x40010000
 80015a4:	40010800 	.word	0x40010800
 80015a8:	40010c00 	.word	0x40010c00
 80015ac:	40011000 	.word	0x40011000
 80015b0:	40010400 	.word	0x40010400

080015b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
 80015c0:	4613      	mov	r3, r2
 80015c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c4:	787b      	ldrb	r3, [r7, #1]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015d0:	e003      	b.n	80015da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	041a      	lsls	r2, r3, #16
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	611a      	str	r2, [r3, #16]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e26c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8087 	beq.w	8001712 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001604:	4b92      	ldr	r3, [pc, #584]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b04      	cmp	r3, #4
 800160e:	d00c      	beq.n	800162a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001610:	4b8f      	ldr	r3, [pc, #572]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d112      	bne.n	8001642 <HAL_RCC_OscConfig+0x5e>
 800161c:	4b8c      	ldr	r3, [pc, #560]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d10b      	bne.n	8001642 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162a:	4b89      	ldr	r3, [pc, #548]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d06c      	beq.n	8001710 <HAL_RCC_OscConfig+0x12c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d168      	bne.n	8001710 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e246      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x76>
 800164c:	4b80      	ldr	r3, [pc, #512]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a7f      	ldr	r2, [pc, #508]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e02e      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x98>
 8001662:	4b7b      	ldr	r3, [pc, #492]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a7a      	ldr	r2, [pc, #488]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b78      	ldr	r3, [pc, #480]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a77      	ldr	r2, [pc, #476]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e01d      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0xbc>
 8001686:	4b72      	ldr	r3, [pc, #456]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a71      	ldr	r2, [pc, #452]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b6f      	ldr	r3, [pc, #444]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6e      	ldr	r2, [pc, #440]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 80016a0:	4b6b      	ldr	r3, [pc, #428]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a6a      	ldr	r2, [pc, #424]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b68      	ldr	r3, [pc, #416]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a67      	ldr	r2, [pc, #412]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fcec 	bl	800109c <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fce8 	bl	800109c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1fa      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	4b5d      	ldr	r3, [pc, #372]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0xe4>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fcd8 	bl	800109c <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fcd4 	bl	800109c <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e1e6      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	4b53      	ldr	r3, [pc, #332]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x10c>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d063      	beq.n	80017e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800171e:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00b      	beq.n	8001742 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800172a:	4b49      	ldr	r3, [pc, #292]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b08      	cmp	r3, #8
 8001734:	d11c      	bne.n	8001770 <HAL_RCC_OscConfig+0x18c>
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d116      	bne.n	8001770 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	4b43      	ldr	r3, [pc, #268]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <HAL_RCC_OscConfig+0x176>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d001      	beq.n	800175a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e1ba      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4939      	ldr	r1, [pc, #228]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	e03a      	b.n	80017e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001778:	4b36      	ldr	r3, [pc, #216]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff fc8d 	bl	800109c <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001786:	f7ff fc89 	bl	800109c <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e19b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4927      	ldr	r1, [pc, #156]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
 80017b8:	e015      	b.n	80017e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fc6c 	bl	800109c <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c8:	f7ff fc68 	bl	800109c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e17a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d03a      	beq.n	8001868 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d019      	beq.n	800182e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_RCC_OscConfig+0x274>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001800:	f7ff fc4c 	bl	800109c <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff fc48 	bl	800109c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e15a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001826:	2001      	movs	r0, #1
 8001828:	f000 faa6 	bl	8001d78 <RCC_Delay>
 800182c:	e01c      	b.n	8001868 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_RCC_OscConfig+0x274>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff fc32 	bl	800109c <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183a:	e00f      	b.n	800185c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff fc2e 	bl	800109c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d908      	bls.n	800185c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e140      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000
 8001854:	42420000 	.word	0x42420000
 8001858:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185c:	4b9e      	ldr	r3, [pc, #632]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1e9      	bne.n	800183c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80a6 	beq.w	80019c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187a:	4b97      	ldr	r3, [pc, #604]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10d      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b94      	ldr	r3, [pc, #592]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a93      	ldr	r2, [pc, #588]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	61d3      	str	r3, [r2, #28]
 8001892:	4b91      	ldr	r3, [pc, #580]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189e:	2301      	movs	r3, #1
 80018a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4b8e      	ldr	r3, [pc, #568]	; (8001adc <HAL_RCC_OscConfig+0x4f8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d118      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ae:	4b8b      	ldr	r3, [pc, #556]	; (8001adc <HAL_RCC_OscConfig+0x4f8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a8a      	ldr	r2, [pc, #552]	; (8001adc <HAL_RCC_OscConfig+0x4f8>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fbef 	bl	800109c <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7ff fbeb 	bl	800109c <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b64      	cmp	r3, #100	; 0x64
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0fd      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	4b81      	ldr	r3, [pc, #516]	; (8001adc <HAL_RCC_OscConfig+0x4f8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x312>
 80018e8:	4b7b      	ldr	r3, [pc, #492]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4a7a      	ldr	r2, [pc, #488]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6213      	str	r3, [r2, #32]
 80018f4:	e02d      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x334>
 80018fe:	4b76      	ldr	r3, [pc, #472]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a75      	ldr	r2, [pc, #468]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6213      	str	r3, [r2, #32]
 800190a:	4b73      	ldr	r3, [pc, #460]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a72      	ldr	r2, [pc, #456]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	6213      	str	r3, [r2, #32]
 8001916:	e01c      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b05      	cmp	r3, #5
 800191e:	d10c      	bne.n	800193a <HAL_RCC_OscConfig+0x356>
 8001920:	4b6d      	ldr	r3, [pc, #436]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4a6c      	ldr	r2, [pc, #432]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6213      	str	r3, [r2, #32]
 800192c:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4a69      	ldr	r2, [pc, #420]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6213      	str	r3, [r2, #32]
 8001938:	e00b      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 800193a:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	4a66      	ldr	r2, [pc, #408]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6213      	str	r3, [r2, #32]
 8001946:	4b64      	ldr	r3, [pc, #400]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a63      	ldr	r2, [pc, #396]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d015      	beq.n	8001986 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7ff fb9f 	bl	800109c <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff fb9b 	bl	800109c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e0ab      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	4b57      	ldr	r3, [pc, #348]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ee      	beq.n	8001962 <HAL_RCC_OscConfig+0x37e>
 8001984:	e014      	b.n	80019b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001986:	f7ff fb89 	bl	800109c <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff fb85 	bl	800109c <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e095      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ee      	bne.n	800198e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d105      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b6:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a47      	ldr	r2, [pc, #284]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8081 	beq.w	8001ace <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019cc:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d061      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d146      	bne.n	8001a6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e0:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <HAL_RCC_OscConfig+0x4fc>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff fb59 	bl	800109c <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff fb55 	bl	800109c <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e067      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a14:	d108      	bne.n	8001a28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	492d      	ldr	r1, [pc, #180]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a19      	ldr	r1, [r3, #32]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	4927      	ldr	r1, [pc, #156]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <HAL_RCC_OscConfig+0x4fc>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a46:	f7ff fb29 	bl	800109c <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff fb25 	bl	800109c <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e037      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x46a>
 8001a6c:	e02f      	b.n	8001ace <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <HAL_RCC_OscConfig+0x4fc>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fb12 	bl	800109c <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff fb0e 	bl	800109c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e020      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x498>
 8001a9a:	e018      	b.n	8001ace <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e013      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40007000 	.word	0x40007000
 8001ae0:	42420060 	.word	0x42420060

08001ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0d0      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af8:	4b6a      	ldr	r3, [pc, #424]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d910      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b67      	ldr	r3, [pc, #412]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 0207 	bic.w	r2, r3, #7
 8001b0e:	4965      	ldr	r1, [pc, #404]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b63      	ldr	r3, [pc, #396]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0b8      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b40:	4b59      	ldr	r3, [pc, #356]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4a58      	ldr	r2, [pc, #352]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b58:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b64:	4b50      	ldr	r3, [pc, #320]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	494d      	ldr	r1, [pc, #308]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d040      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d115      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e07f      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	4b41      	ldr	r3, [pc, #260]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e073      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb2:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e06b      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc2:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f023 0203 	bic.w	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4936      	ldr	r1, [pc, #216]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd4:	f7ff fa62 	bl	800109c <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f7ff fa5e 	bl	800109c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e053      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 020c 	and.w	r2, r3, #12
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d1eb      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d210      	bcs.n	8001c34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 0207 	bic.w	r2, r3, #7
 8001c1a:	4922      	ldr	r1, [pc, #136]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e032      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4916      	ldr	r1, [pc, #88]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	490e      	ldr	r1, [pc, #56]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c72:	f000 f821 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	490a      	ldr	r1, [pc, #40]	; (8001cac <HAL_RCC_ClockConfig+0x1c8>)
 8001c84:	5ccb      	ldrb	r3, [r1, r3]
 8001c86:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1cc>)
 8001c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_RCC_ClockConfig+0x1d0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f9c0 	bl	8001018 <HAL_InitTick>

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40022000 	.word	0x40022000
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	08001e34 	.word	0x08001e34
 8001cb0:	20000040 	.word	0x20000040
 8001cb4:	20000044 	.word	0x20000044

08001cb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb8:	b490      	push	{r4, r7}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cc0:	1d3c      	adds	r4, r7, #4
 8001cc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cc8:	f240 2301 	movw	r3, #513	; 0x201
 8001ccc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d002      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d003      	beq.n	8001cfe <HAL_RCC_GetSysClockFreq+0x46>
 8001cf6:	e02d      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfa:	623b      	str	r3, [r7, #32]
      break;
 8001cfc:	e02d      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	0c9b      	lsrs	r3, r3, #18
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	0c5b      	lsrs	r3, r3, #17
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d36:	fb02 f203 	mul.w	r2, r2, r3
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
 8001d42:	e004      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d48:	fb02 f303 	mul.w	r3, r2, r3
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	623b      	str	r3, [r7, #32]
      break;
 8001d52:	e002      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d56:	623b      	str	r3, [r7, #32]
      break;
 8001d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3728      	adds	r7, #40	; 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc90      	pop	{r4, r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	08001e24 	.word	0x08001e24
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	007a1200 	.word	0x007a1200
 8001d74:	003d0900 	.word	0x003d0900

08001d78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d80:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <RCC_Delay+0x34>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <RCC_Delay+0x38>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	0a5b      	lsrs	r3, r3, #9
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d94:	bf00      	nop
  }
  while (Delay --);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1e5a      	subs	r2, r3, #1
 8001d9a:	60fa      	str	r2, [r7, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f9      	bne.n	8001d94 <RCC_Delay+0x1c>
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	20000040 	.word	0x20000040
 8001db0:	10624dd3 	.word	0x10624dd3

08001db4 <__libc_init_array>:
 8001db4:	b570      	push	{r4, r5, r6, lr}
 8001db6:	2600      	movs	r6, #0
 8001db8:	4d0c      	ldr	r5, [pc, #48]	; (8001dec <__libc_init_array+0x38>)
 8001dba:	4c0d      	ldr	r4, [pc, #52]	; (8001df0 <__libc_init_array+0x3c>)
 8001dbc:	1b64      	subs	r4, r4, r5
 8001dbe:	10a4      	asrs	r4, r4, #2
 8001dc0:	42a6      	cmp	r6, r4
 8001dc2:	d109      	bne.n	8001dd8 <__libc_init_array+0x24>
 8001dc4:	f000 f822 	bl	8001e0c <_init>
 8001dc8:	2600      	movs	r6, #0
 8001dca:	4d0a      	ldr	r5, [pc, #40]	; (8001df4 <__libc_init_array+0x40>)
 8001dcc:	4c0a      	ldr	r4, [pc, #40]	; (8001df8 <__libc_init_array+0x44>)
 8001dce:	1b64      	subs	r4, r4, r5
 8001dd0:	10a4      	asrs	r4, r4, #2
 8001dd2:	42a6      	cmp	r6, r4
 8001dd4:	d105      	bne.n	8001de2 <__libc_init_array+0x2e>
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}
 8001dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ddc:	4798      	blx	r3
 8001dde:	3601      	adds	r6, #1
 8001de0:	e7ee      	b.n	8001dc0 <__libc_init_array+0xc>
 8001de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001de6:	4798      	blx	r3
 8001de8:	3601      	adds	r6, #1
 8001dea:	e7f2      	b.n	8001dd2 <__libc_init_array+0x1e>
 8001dec:	08001e44 	.word	0x08001e44
 8001df0:	08001e44 	.word	0x08001e44
 8001df4:	08001e44 	.word	0x08001e44
 8001df8:	08001e48 	.word	0x08001e48

08001dfc <memset>:
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4402      	add	r2, r0
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d100      	bne.n	8001e06 <memset+0xa>
 8001e04:	4770      	bx	lr
 8001e06:	f803 1b01 	strb.w	r1, [r3], #1
 8001e0a:	e7f9      	b.n	8001e00 <memset+0x4>

08001e0c <_init>:
 8001e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0e:	bf00      	nop
 8001e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e12:	bc08      	pop	{r3}
 8001e14:	469e      	mov	lr, r3
 8001e16:	4770      	bx	lr

08001e18 <_fini>:
 8001e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1a:	bf00      	nop
 8001e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e1e:	bc08      	pop	{r3}
 8001e20:	469e      	mov	lr, r3
 8001e22:	4770      	bx	lr
